mutate(race_grouped = as.numeric(as.character(race_grouped)),
race_report_mergeCat = case_when(race_grouped == 5 |
race_grouped == 6 |
race_grouped == 8 |
race_grouped == 9 |
race_grouped == 9.1 |
race_grouped == 9.2 |
race_grouped == 10 ~ 999,
TRUE~race_grouped)) %>%
mutate(race_report_fin = case_when(race_report_mergeCat == 1~"White or Caucasian",
race_report_mergeCat == 2~"Asian or Asian American",
race_report_mergeCat == 3~"African American or Black",
race_report_mergeCat == 4~"Hispanic or Latinx",
race_report_mergeCat == 5~"Native American",
race_report_mergeCat == 6~"Native Hawaiian or Pacific Islander",
race_report_mergeCat == 7~"Middle Eastern",
race_report_mergeCat == 8~"Multiracial or Other/Not Specified",
race_report_mergeCat == 999~"Multiracial or other",
TRUE~NA_character_),
race_grouped = NULL)
})
participantDescriptives = participantTotalDescriptives %>%
drop_na(race_report_fin)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "race_report_fin")))
participantDescriptives = participantTotalDescriptives %>%
filter(gender == 1) %>%
drop_na(race_report_fin,
gender)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "race_report_fin")))
participantDescriptives = participantTotalDescriptives %>%
filter(gender == 2) %>%
drop_na(gender,
race_report_fin)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "race_report_fin")))
participantDescriptives = participantTotalDescriptives %>%
filter(gender == 6) %>%
drop_na(gender,
race_report_fin)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "race_report_fin")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(disability_none)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "disability_none")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(disability_none) %>%
filter(gender == 1)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "disability_none")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(disability_none) %>%
filter(gender == 1)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "disability_none")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(disability_none) %>%
filter(gender == 2)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "disability_none")))
#other gender identity
participantDescriptives = participantTotalDescriptives %>%
drop_na(disability_none) %>%
filter(gender == 6)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "disability_none")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(citizen)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "citizen")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(citizen) %>%
filter(gender == 2)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "citizen")))
participantDescriptives = participantTotalDescriptives %>%
drop_na(citizen) %>%
filter(gender == 6)
autofit(flextable(returnSingleChoiceFrequencies(data = participantDescriptives,
var = "citizen")))
# identity composite table
categoryName = "Identification with\ncomputing"
varList = c("identity_compPerson",
"belong_belong",
"identity_bigPart")
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_identity = rbind(tablecomposite_time1,
tablecomposite_time2)
tablecomposite_identity
# confidence composite table
categoryName = "Confidence to\ncommunicate"
varList = c("selfEfficacy_communicateTech",
"selfEfficacy_teach",
"selfEfficacy_mentor",
"selfEfficacy_introduce",
"selfEfficacy_discussWork",
"selfEfficacy_communicateTheory")
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_confidence = rbind(tablecomposite_time1,
tablecomposite_time2)
# confidence2 composite table
categoryName = "Confidence to\nsucceed"
varList = c("selfEfficacy_employment",
"selfEfficacy_capable",
"selfEfficacy_completeGrad",
"selfEfficacy_expert",
"selfEfficacy_publishTier1")
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_confidence2 = rbind(tablecomposite_time1,
tablecomposite_time2)
# imposter composite table
categoryName = "Sense of imposter\nsyndrome"
varList = c("imposter_competent",
"imposter_expectations",
"imposter_luck",
"imposter_accomplishment")
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_imposter = rbind(tablecomposite_time1,
tablecomposite_time2)
tablecomposite = rbind(tablecomposite_identity,
tablecomposite_confidence,
tablecomposite_confidence2,
tablecomposite_imposter)
#set order levels
tableCategory_levels = c("Identification with\ncomputing",
"Confidence to\nsucceed",
"Confidence to\ncommunicate",
"Sense of imposter\nsyndrome")
tablecomposite$category = factor(tablecomposite$category,levels = tableCategory_levels)
source("ggplotConstructLoop.R")
source("significanceLoop.R")
#craft the table specified below
tableGrouping = c("table1",
"table2",
"table3",
"table4")
totalTable = NULL
i = 1
for(i in 1:length(tableGrouping)){
tableGroupingLabel = tableGrouping[i]
source("tablemakingLoop_ttest_ideals2021.R")
totalTable = rbind(totalTable,
table)
}
totalTable = totalTable %>%
dplyr::select(subheadingText,
xVariables,
questionText,
Time1,
Time2,
`Cohen's D`)
autofit(flextable(totalTable))
#craft the table specified below
tableGrouping = c("table1",
"table2",
"table3",
"table4")
totalTable = NULL
i = 1
for(i in 1:length(tableGrouping)){
tableGroupingLabel = tableGrouping[i]
source("tablemakingLoop_ttest_ideals2021.R")
totalTable = rbind(totalTable,
table)
}
totalTable = totalTable %>%
dplyr::select(subheadingText,
xVariables,
questionText,
Time1,
Time2,
`Cohen's D`)
autofit(flextable(totalTable))
# support mentor composite table
categoryName = "Perception of\nmentorship support"
varList = c("mentorSupport_skills",
"mentorSupport_compassion",
"mentorSupport_perspective",
"mentorSupport_careerOptions",
"mentorSupport_ideas"
)
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_supportmentor = rbind(tablecomposite_time1,
tablecomposite_time2)
# support mentor composite table
categoryName = "Perception of\nprofessional networks"
varList = c("profNetwork_pd",
"profNetwork_peersConference",
"profNetwork_mentorsConference",
"profNetwork_discussIssues"
)
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_profnetwork = rbind(tablecomposite_time1,
tablecomposite_time2)
# composite table
categoryName = "Interest in a\ncomputing-related career"
varList = c("futureCareer_computing"
)
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_futureComputing = rbind(tablecomposite_time1,
tablecomposite_time2)
# composite table
categoryName = "Interest in a\ncomputing research career"
varList = c("futureCareer_research"
)
tablecomposite_data = idealsBothSurveys_numeric %>%
dplyr::select(CERPID,
paste0(varList,"_w1"),
paste0(varList,"_w2")) %>%
na.omit()
source("time1_tablemaker.R")
source("time2_tablemaker.R")
#merge time1 and time2 tables
tablecomposite_futureComputingResearch = rbind(tablecomposite_time1,
tablecomposite_time2)
tablecomposite = bind_rows(tablecomposite_supportmentor,
tablecomposite_profnetwork)
#set order levels
tableCategory_levels = c("Perception of\nmentorship support",
"Perception of\nprofessional networks")
tablecomposite$category = factor(tablecomposite$category,levels = tableCategory_levels)
source("ggplotConstructLoop.R")
source("significanceLoop.R")
#craft the table specified below
tableGrouping = c("table5",
"table6")
totalTable = NULL
i = 1
for(i in 1:length(tableGrouping)){
tableGroupingLabel = tableGrouping[i]
source("tablemakingLoop_ttest_ideals2021.R")
totalTable = rbind(totalTable,
table)
}
flextable(totalTable)
library(devtools)
install_github("cra-cerp/package_CERPVariableManagement")
install_github("cra-cerp/package_CERPVariableManagement/package/CERPVariableManagement")
library(CERPVariableManagement)
shiny::runApp('Documents/testingShinyAuthentication')
detach("package:shiny.reglog", unload = TRUE)
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text", force = TRUE)
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text", force = TRUE)
runApp('Documents/testingShinyAuthentication')
# private local file with personal client id/keys
source("~/Desktop/evelyn_ga_auth.R") # select "no" for "is it ok to cache?"
shiny::runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
??blank_textInputs
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
shiny::runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
shiny::runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
shiny::runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
shiny::runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
runApp('Documents/testingShinyAuthentication')
devtools::install_github("eyarzebinski/shiny.reglog", ref = "cerp-text")
knitr::opts_chunk$set(echo = TRUE, fig.pos = "H", out.extra = "")
options(kableExtra.latex.load_packages = FALSE)
knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table]{xcolor}', x, fixed = TRUE)})
# clean up environment
rm(list=ls())
gc(verbose=TRUE)
# load libraries
library(kableExtra)
library(Hmisc)
library(pwr)
library(lattice)
library(knitr)
library(stargazer)
library(xtable)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtable)
library(berryFunctions)
library(sf)
library(ggmap)
library(maps)
library(mapdata)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(raster)
library(dplyr)
library(spData)
library(tmap)
install.packages("tmap")
knitr::opts_chunk$set(echo = TRUE, fig.pos = "H", out.extra = "")
options(kableExtra.latex.load_packages = FALSE)
knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table]{xcolor}', x, fixed = TRUE)})
# clean up environment
rm(list=ls())
gc(verbose=TRUE)
# load libraries
library(kableExtra)
library(Hmisc)
library(pwr)
library(lattice)
library(knitr)
library(stargazer)
library(xtable)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtable)
library(berryFunctions)
library(sf)
library(ggmap)
library(maps)
library(mapdata)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(raster)
library(dplyr)
library(spData)
#library(tmap)
#library(tmaptools)
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(flextable)
library(officer)
library(magick)
library(janitor)
library(rsvg)
# read data and inputs
surveyData <- read.csv ("dbs_report_2019.csv", stringsAsFactors = FALSE, na.strings = c("","NA"))
whiteSquare <- image_read('img/whiteSquare.png')
View(surveyData)
n_unit = n_distin(surveyData$reportCode)
n_unit = n_distinct(surveyData$reportCode)
n_inst = n_distinct(surveyData$InstCode)
n_unit = n_distinct(surveyData$reportTag)
n_unit = n_distinct(surveyData$reportCode)
n_inst = n_distinct(surveyData$InstCode[!is.na(surveyData$reportCode)])
n_institutions = 134
n_inst = n_distinct(surveyData$InstCode[!is.na(surveyData$reportCode)])
n_departments = 143
n_unit = n_distinct(surveyData$reportCode)
#| include: false
# read data and inputs
surveyData <- read.csv ("dbs_report_2019.csv", stringsAsFactors = FALSE, na.strings = c("","NA"))
#whiteSquare <- image_read('img/whiteSquare.png')
# set values and dates
dbsYear <- 2019
currentYear <- 2021
dbsStart <- "October 2019"
dbsEnd <- "February 2020"
#n_institutions <- 134
n_inst <- n_distinct(surveyData$InstCode[!is.na(surveyData$reportCode)])
#n_departments = 143
n_unit <- n_distinct(surveyData$reportCode)
dbs_loc <- read.csv("DBS_Dept_Location.csv", stringsAsFactors = FALSE)
View(dbs_loc)
#| label: dbsMap
#| warning: false
#| message: false
data(World, land, metro, rivers)
dbs_loc <- read.csv("DBS_Dept_Location.csv", stringsAsFactors = FALSE) %>%
mutate(institution = as.character(institution)) %>%
select(institution,
everything())
dbs_sf = st_as_sf(dbs_loc, coords = c('long', 'lat'), crs = st_crs(us_states)$proj4string)
cra_pal <- c("#6CACE4", "#9F8FCA", "#A6093D", "#2731A1", "#FFD100")
# for interactive
#ttm()
us_states_map =
tm_shape(us_states, projection = 2163) + tm_polygons() +
tm_shape(subset(World, World$iso_a3 == "CAN"), projection = 2163) + tm_polygons() +
tm_shape(dbs_sf) + tm_symbols(size = 0.4, col = "deptTypeCode", palette = cra_pal,
legend.size.is.portrait=TRUE, legend.col.show = FALSE) +
tm_layout(frame = FALSE,  bg.color = NA,
main.title = NA,
inner.margins=c(0.08),
legend.outside = FALSE,
legend.position = c("RIGHT","BOTTOM"),
legend.stack = "vertical",
legend.title.size = 1) +
# for interactive
#tm_bubbles(popup.vars = c("Institution Name" = "institution")) +
tm_add_legend("symbol",
col = cra_pal,
labels = c("Certificate", "Associate's", "Bachelor's", "Master's", "Doctorate"),
title = "Highest Degree")
library(tmap)
install.packages("stars")
library(tmap)
library(tmap)
library(stars)
knitr::opts_chunk$set(echo = TRUE, fig.pos = "H", out.extra = "")
options(kableExtra.latex.load_packages = FALSE)
knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table]{xcolor}', x, fixed = TRUE)})
# load libraries
library(kableExtra)
library(Hmisc)
library(pwr)
library(lattice)
library(knitr)
library(stargazer)
library(xtable)
library(ggplot2)
library(scales)
library(gridExtra)
library(gtable)
library(berryFunctions)
library(sf)
library(ggmap)
library(maps)
library(mapdata)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(raster)
library(dplyr)
library(spData)
library(stars)
install.packages("stars")
library(stars)
library(stars)
getwd()
setwd("~/Documents/githubCode/eyarzebinski.github.io/")
getwd()
pwd()
quarto publish gh-pages
setwd("~/Documents/githubCode/eyarzebinski.github.io")
setwd("~/")
setwd("~/Documents/githubCode/eyarzebinski.github.io")
setwd("~/Documents/githubCode/eyarzebinski.github.io")
pwd
